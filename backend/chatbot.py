import openai
import json
import os
from historique import get_historique, ajouter_message
from tokenizer import compter_tokens


# ğŸ”¹ Charger la config
CONFIG_FILE = "config.json"

def charger_config():
    try:
        with open(CONFIG_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"temperature": 0.5}  # TempÃ©rature par dÃ©faut

config = charger_config()


# ğŸ”¹ DÃ©finir la clÃ© API OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# ğŸ”¹ Fonction principale du chatbot
def repondre(message):
    # ğŸ”¹ Ajouter le message de l'utilisateur Ã  l'historique
    ajouter_message("user", message)

    # ğŸ”¹ RÃ©cupÃ©rer l'historique formatÃ©
    historique = get_historique()

    # ğŸ”¹ VÃ©rifier le nombre total de tokens dans l'historique
    tokens_total = sum(compter_tokens(msg["content"]) for msg in historique)
    print(f"\n Tokens actuels dans l'historique : {tokens_total}")

    # ğŸ”¹ VÃ©rifier le nombre total de tokens pour Ã©viter de dÃ©passer la limite OpenAI
    tokens_total = sum(compter_tokens(msg["content"]) for msg in historique)
    if tokens_total > 1700:  # GPT-4 Turbo a une limite Ã©levÃ©e, on garde 3000 tokens max
        print("\n Trop de tokens, on va tronquer l'historique...")
        historique = historique[-10:]  # ğŸ”¹ On garde les 10 derniers Ã©changes

    try:
        # ğŸ”¹ Appel Ã  l'API OpenAI
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=historique,
            max_tokens=300,
            temperature=config["temperature"]
        )

        # ğŸ”¹ RÃ©cupÃ©rer la rÃ©ponse gÃ©nÃ©rÃ©e
        reponse_chatbot = response.choices[0].message.content

        # ğŸ”¹ Calcul des tokens gÃ©nÃ©rÃ©s
        tokens_generes = compter_tokens(reponse_chatbot)
        print(f"\n Tokens gÃ©nÃ©rÃ©s par OpenAI : {tokens_generes}")

        # ğŸ”¹ Ajouter la rÃ©ponse Ã  l'historique
        ajouter_message("assistant", reponse_chatbot)

        return reponse_chatbot

    except Exception as e:
        print("Erreur avec OpenAI :", e)
        return "Je rencontre un problÃ¨me technique. RÃ©essaie plus tard."
    


# ğŸ”¹ TEST : Simuler une conversation
if __name__ == "__main__":
    while True:
        message = input("\nğŸ’¬ Toi : ")
        if message.lower() in ["exit", "quit", "stop"]:
            print("Fin de la session.")
            break
        
        reponse = repondre(message)
        print(f"\n Chatbot : {reponse}")
